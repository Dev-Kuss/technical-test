version: '3.8'

networks:
  mili-network:
    driver: bridge

services:
  postgres:
    image: postgres:latest
    environment:
      POSTGRES_USER: myuser
      POSTGRES_PASSWORD: secret
      POSTGRES_DB: productdb
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U myuser -d productdb"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - mili-network

  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"  # Porta AMQP
      - "15672:15672"  # Porta da interface web
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_port_connectivity"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - mili-network

  product-service:
    build:
      context: ./technical-test-back/product-service
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/productdb
      - SPRING_DATASOURCE_USERNAME=myuser
      - SPRING_DATASOURCE_PASSWORD=secret
      - SPRING_RABBITMQ_HOST=rabbitmq
      - SPRING_RABBITMQ_PORT=5672
      - SPRING_RABBITMQ_USERNAME=guest
      - SPRING_RABBITMQ_PASSWORD=guest
    depends_on:
      - postgres
      - rabbitmq
    networks:
      - mili-network

  notification-service:
    build:
      context: ./technical-test-back/notification-service
      dockerfile: Dockerfile
    ports:
      - "8082:8082"
    environment:
      - SPRING_RABBITMQ_HOST=rabbitmq
      - SPRING_RABBITMQ_PORT=5672
      - SPRING_RABBITMQ_USERNAME=guest
      - SPRING_RABBITMQ_PASSWORD=guest
    depends_on:
      - rabbitmq
    networks:
      - mili-network

  frontend:
    build:
      context: ./technical-test-front
      dockerfile: Dockerfile
    ports:
      - "3000:80"  # Nginx usa a porta 80 internamente
    environment:
      - VITE_API_URL=http://localhost:8080
      - VITE_WS_URL=ws://localhost:8082
    depends_on:
      - product-service
      - notification-service
    networks:
      - mili-network

  price-service:
    build:
      context: ./technical-test-back/price-service
      dockerfile: Dockerfile
    ports:
      - "8081:8081"
    environment:
      - SPRING_RABBITMQ_HOST=rabbitmq
      - SPRING_RABBITMQ_PORT=5672
      - SPRING_RABBITMQ_USERNAME=guest
      - SPRING_RABBITMQ_PASSWORD=guest
      - PRODUCT_SERVICE_URL=http://product-service:8080
    depends_on:
      - rabbitmq
      - product-service
    networks:
      - mili-network

volumes:
  postgres_data:
  rabbitmq_data:
