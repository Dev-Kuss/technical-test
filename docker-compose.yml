services:
  product-service:
    build: 
      context: ./technical-test-back/product-service
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/product_db
      - SPRING_DATASOURCE_USERNAME=myuser
      - SPRING_DATASOURCE_PASSWORD=secret
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - mili-network

  price-service:
    build:
      context: ./technical-test-back/price-service
      dockerfile: Dockerfile
    ports:
      - "8081:8081"
    depends_on:
      - product-service
    networks:
      - mili-network

  frontend:
    build:
      context: ./technical-test-front
      dockerfile: Dockerfile
    ports:
      - "3000:80"
    depends_on:
      - product-service
      - price-service
    networks:
      - mili-network

  postgres:
    image: 'postgres:latest'
    environment:
      - 'POSTGRES_DB=product_db'
      - 'POSTGRES_PASSWORD=secret'
      - 'POSTGRES_USER=myuser'
    ports:
      - '5432:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - mili-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U myuser -d product_db"]
      interval: 10s
      timeout: 5s
      retries: 5

networks:
  mili-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
